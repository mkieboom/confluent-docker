version: "3.5"

# Two clusters with 1 broker each
services:

 # Cluster one

  zookeepersource:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeepersource
    container_name: zookeepersource
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafkasource:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    hostname: kafkasource
    container_name: kafkasource
    depends_on:
      - zookeepersource
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_ZOOKEEPER_CONNECT: zookeepersource:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkasource:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkasource:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafkasource:9092"
      CONFLUENT_METRICS_ENABLE: 'false'

 # Cluster two

  zookeeperdest:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeperdest
    container_name: zookeeperdest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"

  kafkadest:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    hostname: kafkadest
    container_name: kafkadest
    depends_on:
      - zookeeperdest
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_ZOOKEEPER_CONNECT: zookeeperdest:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkadest:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafkadest:9092"
      CONFLUENT_METRICS_ENABLE: 'false'


  connect:
    image: confluentinc/cp-enterprise-replicator:5.3.0
    #image: confluentinc/cp-kafka-connect:5.3.0
    hostname: connect
    container_name: connect
    depends_on:
      - zookeepersource
      - kafkasource
      - kafkadest
    ports:
      - "8083:8083"
      - "9892:9892"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafkasource:9092
      CONNECT_ZOOKEEPER_CONNECT: 'zookeepersource:2181'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_LISTENERS: "http://0.0.0.0:8083"
      CONNECT_GROUP_ID: connect
      CONNECT_PRODUCER_CLIENT_ID: "connect-worker-producer"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-dc1:8081,http://schema-registry-dc2:8082'
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      # Confluent Monitoring Interceptors for Control Center Streams Monitoring
      #CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      #CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: kafkasource:9092
      #CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      #CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: kafkasource:9092
      KAFKA_JMX_PORT: 9892
      KAFKA_JMX_HOSTNAME: localhost
#       CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
#       CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
#       CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.3.0.jar


  # confluent-client:
  #   image: mkieboom/confluent-client-docker:latest
  #   hostname: confluent-client
  #   container_name: confluent-client

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:5.3.0
  #   container_name: control-center
  #   depends_on:
  #     - zookeeperdest
  #     - kafkadest
  #     - kafkadest2
  #     - kafkadest3
  #     - connect
  #   ports:
  #     - "9021:9021"
  #     - "9022:9022"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: kafkadest:9092
  #     CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeperdest:2181
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
  #     CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
  #     CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
  #     CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
  #     CONTROL_CENTER_CONNECT_CLUSTER: "http://connect:8083"
  #     #CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
  #     #CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
  #     #CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"



# Launch
# docker-compose up -d

# Stop
# docker-compose down

# List brokers
# docker exec -it zookeepersource zookeeper-shell localhost:2181 ls /brokers/ids

# List topics
# docker exec -it kafkasource kafka-topics --bootstrap-server localhost:9092 --list

# Create a topic
# docker exec -it kafkasource kafka-topics --bootstrap-server localhost:9092 --create --topic my-topic --replication-factor 3 --partitions 6

# Write 10 messages to the topic and read them
# docker exec -it kafkasource /bin/bash
# seq 10 | kafka-console-producer --broker-list localhost:9092 --topic my-topic
# kafka-console-consumer --bootstrap-server localhost:9092 --topic my-topic --from-beginning